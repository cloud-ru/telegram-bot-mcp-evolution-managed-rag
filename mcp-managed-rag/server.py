from typing import Dict, Any
import httpx
import os
import asyncio
from fastmcp import FastMCP
from loguru import logger

from dotenv import load_dotenv, find_dotenv
load_dotenv(find_dotenv())


# Constants
AUTH_URL = "https://auth.iam.sbercloud.ru/auth/system/openid/token"
RETRIEVE_URL_TEMPLATE = "https://{kb_id}.managed-rag.inference.cloud.ru/api/v1/retrieve"

mcp = FastMCP("managed-rag")
mcp.settings.port = 8003
mcp.settings.host = "0.0.0.0"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è access_token
_access_token: str | None = "no token"
_access_token_lock = asyncio.Lock()


def _require_env_vars(names: list[str]) -> dict[str, str]:
    missing = [n for n in names if not os.getenv(n)]
    if missing:
        raise ValueError(
            "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: " + ", ".join(missing)
        )
    return {n: os.getenv(n, "") for n in names}


def _parse_retrieve_limit(value: str | None, default: int = 6) -> int:
    if value is None:
        return default
    try:
        limit = int(value)
        if limit <= 0:
            return default
        return limit
    except (TypeError, ValueError):
        return default


async def postprocess_retrieve_result(retrieve_result: Dict[str, Any]) -> str:
    result_str = "Context:\n\n"
    results = retrieve_result.get("results", [])
    for idx, el in enumerate(results, start=1):
        content = el.get("content", "")
        metadata = el.get("metadata", {})
        result_str += (
            f"Document {idx}:\n"
            f"Content: {content}\n"
            f"Metadata: {metadata}\n\n"
        )
    return result_str

async def get_access_token(env) -> str:
    async with _access_token_lock:
        global _access_token
        try:
            async with httpx.AsyncClient(timeout=10.0) as client:
                token_response = await client.post(
                    AUTH_URL,
                    data={
                        "grant_type": "client_credentials",
                        "client_id": env["EVOLUTION_SERVICE_ACCOUNT_KEY_ID"],
                        "client_secret": env["EVOLUTION_SERVICE_ACCOUNT_KEY_ID"],
                    },
                )
                token_response.raise_for_status()
                access_token = token_response.json().get("access_token")
                if not access_token:
                    raise ValueError("–û—Ç–≤–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç access_token")
                _access_token = access_token
                return access_token
        except httpx.HTTPStatusError as e:
            raise RuntimeError(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ access token. –°—Ç–∞—Ç—É—Å: {e.response.status_code}; "
                f"–°–æ–æ–±—â–µ–Ω–∏–µ: {e.response.text}"
            )
        except httpx.TimeoutException:
            raise RuntimeError("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ access token.")
        except httpx.RequestError as e:
            raise RuntimeError(f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
        except Exception as e:
            raise RuntimeError(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")


@mcp.tool()
async def request_to_rag(query: str) -> str:
    """
    –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –æ–±—Ä–∞—â–∞–µ—Ç—Å—è –∫ API –ë–∞–∑—ã –ó–Ω–∞–Ω–∏–π –∏ –ø–æ–ª—É—á–∞–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –ù–∞ –≤—ã—Ö–æ–¥–µ –≤—ã–¥–∞–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    Args:
        query: str - –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–º–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏ –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π.
    Raises:
        ValueError: –û—à–∏–±–∫–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏.
        RuntimeError: –°–µ—Ä–≤–µ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞.
    """

    env = _require_env_vars([
        "EVOLUTION_PROJECT_ID",
        "KNOWLEDGE_BASE_ID",
        "KNOWLEDGE_BASE_VERSION_ID",
    ])

    env["EVOLUTION_SERVICE_ACCOUNT_KEY_ID"] = os.getenv("EVOLUTION_SERVICE_ACCOUNT_KEY_ID")
    env["EVOLUTION_SERVICE_ACCOUNT_KEY_ID"] = os.getenv("EVOLUTION_SERVICE_ACCOUNT_KEY_ID")

    retrieve_limit = _parse_retrieve_limit(os.getenv("RETRIEVE_LIMIT"), default=6)

    global _access_token

    async def do_rag_request(access_token: str):
        async with httpx.AsyncClient(timeout=20.0) as client:
            payload = {
                "project_id": env["EVOLUTION_PROJECT_ID"],
                "query": query,
                "retrieve_limit": retrieve_limit,
                "rag_version": env["KNOWLEDGE_BASE_VERSION_ID"],
            }
            return await client.post(
                RETRIEVE_URL_TEMPLATE.format(kb_id=env["KNOWLEDGE_BASE_ID"]),
                json=payload,
                headers={"Authorization": f"Bearer {access_token}"},
            )

    # 1. –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å —Ç–µ–∫—É—â–∏–º —Ç–æ–∫–µ–Ω–æ–º –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω–∞ –Ω–µ—Ç
    if _access_token is None:
        await get_access_token(env)

    try:
        response = await do_rag_request(_access_token)
        if response.status_code == 401:
            # –¢–æ–∫–µ–Ω –∏—Å—Ç—ë–∫ –∏–ª–∏ –Ω–µ–≤–µ—Ä–µ–Ω, –ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É
            await get_access_token(env)  # –æ–±–Ω–æ–≤–∏—Ç _access_token
            response = await do_rag_request(_access_token)
            if response.status_code == 401:
                # –í—Ç–æ—Ä–æ–π 401 –ø–æ–¥—Ä—è–¥ = —Ä–µ–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã.
                raise RuntimeError(
                    "–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å: –ø–æ–≤—Ç–æ—Ä–Ω—ã–π 401 –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π."
                )
        response.raise_for_status()
        retrieve_result = response.json()
    except httpx.HTTPStatusError as e:
        status = e.response.status_code if e.response is not None else "unknown"
        message = e.response.text if e.response is not None else "no message"
        raise RuntimeError(
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã. –°—Ç–∞—Ç—É—Å: {status}; –°–æ–æ–±—â–µ–Ω–∏–µ: {message}"
        )
    except httpx.TimeoutException:
        raise RuntimeError(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã. –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ Managed RAG"
        )
    except httpx.RequestError as e:
        raise RuntimeError(
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã. –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Managed RAG: {e}"
        )
    except Exception as e:
        # –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞
        raise RuntimeError(
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã. –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Managed RAG: {e}"
        )

    postprocessed_retrieve_result = await postprocess_retrieve_result(retrieve_result)
    return postprocessed_retrieve_result


if __name__ == "__main__":
    logger.info("üåê –ó–∞–ø—É—Å–∫ MCP Evolution Managed RAG Server...")
    logger.info(f"üöÄ –°–µ—Ä–≤–µ—Ä –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ http://{mcp.settings.host}:{mcp.settings.port}")
    logger.info(f"üì° SSE endpoint: http://{mcp.settings.host}:{mcp.settings.port}/sse")
    logger.info("‚úã –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    
    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ —Å SSE —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–º
    mcp.run(transport="sse")